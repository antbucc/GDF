package RetrieveInstitutes.plugin;

/*Generated by MPS */

import jetbrains.mps.progress.ProgressMonitorAdapter;
import org.jetbrains.mps.openapi.model.SModel;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import java.io.IOException;
import com.squareup.okhttp.OkHttpClient;
import com.squareup.okhttp.Request;
import com.squareup.okhttp.Response;
import com.google.gson.Gson;
import org.jetbrains.mps.openapi.persistence.PersistenceFacade;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public class RetrieveMethod implements Runnable {
  private static String Token = "b998a469-adf7-4896-8f64-15cce37101c3";
  private static String apiUrl = "https://climbdev.smartcommunitylab.it/v2/api/institute/TEST";
  public RetrieveMethod(ProgressMonitorAdapter adapter, SModel model) {
    this.myAdapter = adapter;
    this.myModel = model;
  }

  public void run() {
    SNode node = createIstanzaDominio_7rmalq_a0a0e();
    SModelOperations.addRootNode(this.myModel, node);

    try {
      Istituto[] result = this.doGetRequest(apiUrl);

      for (int i = 0; i < result.length; i++) {
        SNode istituto = createIstanzaIstituto_7rmalq_a0a0c0d0e(node, result[i].address, result[i].name);
        SModelOperations.addRootNode(this.myModel, istituto);

      }



    } catch (IOException e) {
    }

    this.myAdapter.step("Do some work tish write lock");

  }

  private final ProgressMonitorAdapter myAdapter;
  private SModel myModel;

  private Istituto[] doGetRequest(String url) throws IOException {
    OkHttpClient client = new OkHttpClient();

    Request request = new Request.Builder().header("Authorization", Token).url(url).build();
    Response response = client.newCall(request).execute();
    String result = response.body().string().toString();

    Gson gson = new Gson();

    Istituto[] istituti = gson.fromJson(result, Istituto[].class);
    return istituti;

  }





  private static SNode createIstanzaDominio_7rmalq_a0a0e() {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode n1 = SModelUtil_new.instantiateConceptDeclaration(MetaAdapterFactory.getConcept(0x119e117f12604f12L, 0xb46eefd3d0e4c44fL, 0x29c2332daa2bdd31L, "GiML.structure.IstanzaDominio"), null, null, false);
    n1.setProperty(MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), "TEST");
    return n1;
  }
  private static SNode createIstanzaIstituto_7rmalq_a0a0c0d0e(SNode node0, Object p0, Object p1) {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode n1 = SModelUtil_new.instantiateConceptDeclaration(MetaAdapterFactory.getConcept(0x119e117f12604f12L, 0xb46eefd3d0e4c44fL, 0x29c2332daa757c14L, "GiML.structure.IstanzaIstituto"), null, null, false);
    n1.setProperty(MetaAdapterFactory.getProperty(0x119e117f12604f12L, 0xb46eefd3d0e4c44fL, 0x29c2332daa757c14L, 0x29c2332daabe00b1L, "indirizzo"), p0 + "");
    n1.setProperty(MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), p1 + "");
    n1.setReferenceTarget(MetaAdapterFactory.getReferenceLink(0x1472546da96448a0L, 0xa11e4271b165a42cL, 0x113e1e4cb66fe312L, 0x29c2332daaaaee9aL, "dominio"), node0);
    return n1;
  }
}
