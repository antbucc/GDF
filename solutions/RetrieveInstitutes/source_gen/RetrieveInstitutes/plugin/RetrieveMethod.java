package RetrieveInstitutes.plugin;

/*Generated by MPS */

import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;
import jetbrains.mps.progress.ProgressMonitorAdapter;
import org.jetbrains.mps.openapi.model.SModel;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.baseLanguage.logging.runtime.model.LoggingRuntime;
import org.apache.log4j.Level;
import java.io.IOException;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import com.squareup.okhttp.OkHttpClient;
import com.squareup.okhttp.Request;
import com.squareup.okhttp.Response;
import org.jetbrains.mps.openapi.persistence.PersistenceFacade;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public class RetrieveMethod implements Runnable {
  private static final Logger LOG = LogManager.getLogger(RetrieveMethod.class);
  private static String Token = "b998a469-adf7-4896-8f64-15cce37101c3";
  private static String apiUrl = "https://climbdev.smartcommunitylab.it/v2/api/institute/TEST";
  public RetrieveMethod(ProgressMonitorAdapter adapter, SModel model) {
    this.myAdapter = adapter;
    this.myModel = model;
  }

  public void run() {
    SNode node = createIstanzaDominio_7rmalq_a0a0e();
    try {
      String result = this.doGetRequest(apiUrl);
      LoggingRuntime.logMsgView(Level.WARN, "dopo la chiamata GET all'API: " + result, RetrieveMethod.class, null, null);

    } catch (IOException e) {
    }

    SModelOperations.addRootNode(this.myModel, node);
    this.myAdapter.step("Do some work tish write lock");

  }

  private final ProgressMonitorAdapter myAdapter;
  private SModel myModel;

  private String doGetRequest(String url) throws IOException {
    OkHttpClient client = new OkHttpClient();

    Request request = new Request.Builder().header("Authorization", Token).url(url).build();
    Response response = client.newCall(request).execute();
    String result = response.body().string().toString();

    return result;
  }





  private static SNode createIstanzaDominio_7rmalq_a0a0e() {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode n1 = SModelUtil_new.instantiateConceptDeclaration(MetaAdapterFactory.getConcept(0x119e117f12604f12L, 0xb46eefd3d0e4c44fL, 0x29c2332daa2bdd31L, "GiML.structure.IstanzaDominio"), null, null, false);
    n1.setProperty(MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), "prova2314");
    return n1;
  }
}
