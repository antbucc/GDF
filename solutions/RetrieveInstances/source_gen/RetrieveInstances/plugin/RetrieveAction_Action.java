package RetrieveInstances.plugin;

/*Generated by MPS */

import jetbrains.mps.workbench.action.BaseAction;
import javax.swing.Icon;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.ide.actions.MPSCommonDataKeys;
import jetbrains.mps.project.MPSProject;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.progress.PerformInBackgroundOption;
import com.intellij.openapi.progress.Task;
import com.intellij.openapi.progress.ProgressIndicator;
import jetbrains.mps.progress.ProgressMonitorAdapter;
import org.jetbrains.mps.openapi.module.SRepository;
import com.intellij.openapi.application.ApplicationManager;
import com.intellij.openapi.progress.ProgressManager;

public class RetrieveAction_Action extends BaseAction {
  private static final Icon ICON = null;

  public RetrieveAction_Action() {
    super("Retrieve Instances", "", ICON);
    this.setIsAlwaysVisible(false);
    this.setExecuteOutsideCommand(false);
  }
  @Override
  public boolean isDumbAware() {
    return true;
  }
  @Override
  protected boolean collectActionData(AnActionEvent event, final Map<String, Object> _params) {
    if (!(super.collectActionData(event, _params))) {
      return false;
    }
    {
      SModel model = event.getData(MPSCommonDataKeys.CONTEXT_MODEL);
      if (model == null) {
        return false;
      }
    }
    {
      MPSProject p = event.getData(MPSCommonDataKeys.MPS_PROJECT);
      if (p == null) {
        return false;
      }
    }
    return true;
  }
  @Override
  public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {
    boolean canBeCanceled = true;
    // Will be  sent to the background with the flag PerformInBackgroundOption.ALWAYS_BACKGROUND 
    PerformInBackgroundOption showProgress = PerformInBackgroundOption.DEAF;

    // This is a backgroundable task. It can be sent to the background and canceled  
    // The PerformInBackgroundOption flag specifies if the progress is shown to the user 
    // or if should be in the background from the start  
    // ALWAYS_BACKGROUND is probably the best solution for quick background tasks -   
    // the user will not get a blinking, hardly noticable progress bar visible for only a few fractions of a second 
    // Important thing - you need to implement the onCacel() method  
    // Your code needs to frequently check if the process has been canceled (between every calculation steps)  
    // and handle yourself all steps to revert the action 

    final Task.Backgroundable backgroundable = new Task.Backgroundable(event.getData(MPSCommonDataKeys.MPS_PROJECT).getProject(), "Backgroundable cancelable task", canBeCanceled, showProgress) {
      @Override
      public void run(@NotNull final ProgressIndicator indicator) {
        final ProgressMonitorAdapter adapter = new ProgressMonitorAdapter(indicator);
        SRepository repository = event.getData(MPSCommonDataKeys.MPS_PROJECT).getRepository();

        adapter.start("Progress in progress...", 1);
        int stepValue = 1;

        // a normal step 

        // ReadAction in step is ok 
        // WriteAction in step is ok 
        repository.getModelAccess().executeCommandInEDT(new RetrieveMethod(adapter, event.getData(MPSCommonDataKeys.CONTEXT_MODEL)));
        adapter.advance(stepValue);
        if (adapter.isCanceled()) {
          return;
        }

        adapter.step("Finishing...");

        adapter.done();
      }

      @Override
      public void onCancel() {
        super.onCancel();
        // Needs to handle reverting changes for all the finished steps 
        // This method does not interrupt the steps - steps must be either short or have such interruption capability 
      }
    };
    // The execute() method of actions must be very quick 
    // so every long calculation must be invoked outside of this method like this: 
    ApplicationManager.getApplication().invokeLater(new Runnable() {
      public void run() {
        ProgressManager.getInstance().run(backgroundable);
      }
    });


  }
}
