package GameData.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_BonusPointType;
  private ConceptPresentation props_ChallengeData;
  private ConceptPresentation props_GameData;
  private ConceptPresentation props_Meteo;
  private ConceptPresentation props_Mode;
  private ConceptPresentation props_SchoolDate;
  private ConceptPresentation props_bonusScore;
  private ConceptPresentation props_legNameType;
  private ConceptPresentation props_metersDistance;
  private ConceptPresentation props_metersWalked;
  private ConceptPresentation props_prizeWon;
  private ConceptPresentation props_virtualPriceType;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.BonusPointType:
        if (props_BonusPointType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("BonusPointType");
          props_BonusPointType = cpb.create();
        }
        return props_BonusPointType;
      case LanguageConceptSwitch.ChallengeData:
        if (props_ChallengeData == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_ChallengeData = cpb.create();
        }
        return props_ChallengeData;
      case LanguageConceptSwitch.GameData:
        if (props_GameData == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_GameData = cpb.create();
        }
        return props_GameData;
      case LanguageConceptSwitch.Meteo:
        if (props_Meteo == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Meteo = cpb.create();
        }
        return props_Meteo;
      case LanguageConceptSwitch.Mode:
        if (props_Mode == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("mode");
          props_Mode = cpb.create();
        }
        return props_Mode;
      case LanguageConceptSwitch.SchoolDate:
        if (props_SchoolDate == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("school_date");
          props_SchoolDate = cpb.create();
        }
        return props_SchoolDate;
      case LanguageConceptSwitch.bonusScore:
        if (props_bonusScore == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("bonusScore");
          props_bonusScore = cpb.create();
        }
        return props_bonusScore;
      case LanguageConceptSwitch.legNameType:
        if (props_legNameType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("legNameType");
          props_legNameType = cpb.create();
        }
        return props_legNameType;
      case LanguageConceptSwitch.metersDistance:
        if (props_metersDistance == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("meters_distance");
          props_metersDistance = cpb.create();
        }
        return props_metersDistance;
      case LanguageConceptSwitch.metersWalked:
        if (props_metersWalked == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("meters-walked");
          props_metersWalked = cpb.create();
        }
        return props_metersWalked;
      case LanguageConceptSwitch.prizeWon:
        if (props_prizeWon == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("prizeWon");
          props_prizeWon = cpb.create();
        }
        return props_prizeWon;
      case LanguageConceptSwitch.virtualPriceType:
        if (props_virtualPriceType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("virtualPriceType");
          props_virtualPriceType = cpb.create();
        }
        return props_virtualPriceType;
    }
    return null;
  }
}
