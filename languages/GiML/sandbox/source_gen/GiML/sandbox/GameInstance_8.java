package GiML.sandbox;

/*Generated by MPS */

import com.squareup.okhttp.Credentials;
import com.squareup.okhttp.MediaType;
import java.io.IOException;
import com.google.gson.JsonObject;
import com.squareup.okhttp.RequestBody;
import com.google.gson.JsonArray;
import com.squareup.okhttp.OkHttpClient;
import com.squareup.okhttp.Request;
import com.squareup.okhttp.Response;

public class GameInstance_8 {
  private static String apiGameUrl = "https://dev.smartcommunitylab.it/gamification/";
  private static String apiChallengeUrl = "https://dev.smartcommunitylab.it/gamification/model/game/";
  private static String apiIstituteUrl = "https://climbdev.smartcommunitylab.it/v2/api/institute/";
  private static String apiSchoolUrl = "https://climbdev.smartcommunitylab.it/v2/api/school/";
  private static String Token = "4f513a2b-9669-4c6b-b9c4-60c227920fb0";


  private static String credentials = Credentials.basic("long-rovereto", "long_RoVg@me");
  public static final MediaType JSON = MediaType.parse("application/json; charset=utf-8");
  public GameInstance_8() throws IOException {
    run();
  }

  public void run() throws IOException {


    //  add Institute - School and Classrooms 

    JsonObject objInstitute = new JsonObject();
    // 1. Creation of the body call - json object 
    objInstitute.addProperty("address", "Via Santa Croce, 77 (TN)");
    objInstitute.addProperty("name", "FONDAZIONE BRUNO KESSLER");
    objInstitute.addProperty("objectId", "4b7a5184-142b-4bf1-8621-d7c514a300e9");
    objInstitute.addProperty("ownerId", "TEST");
    String jsonStringInstitute = objInstitute.toString();
    RequestBody bodyInstitute = RequestBody.create(JSON, jsonStringInstitute);
    this.createInstitute(bodyInstitute, "TEST");

    // create School 
    JsonObject objSchool = new JsonObject();
    // 1. Creation of the body call - json object 
    objSchool.addProperty("address", "Via Sommarive, 18 (TN)");
    objSchool.addProperty("name", "FBK ICT");
    objSchool.addProperty("objectId", "842b4677-f285-4440-accf-20cdda76fd6c");
    objSchool.addProperty("ownerId", "TEST");
    String jsonStringSchool = objSchool.toString();
    RequestBody bodySchool = RequestBody.create(JSON, jsonStringSchool);
    String instituteID = this.getInstituteID("FONDAZIONE BRUNO KESSLER");
    this.createSchool(bodySchool, "TEST", instituteID);

    // execute POST call to save the gamification Instance 
    JsonObject obj = new JsonObject();
    String gameID = "idModels2019";
    // 1. Creation of the body call - json object 
    obj.addProperty("id", "idModels2019");
    obj.addProperty("name", "Demo-Models2019");
    obj.addProperty("domain", "TEST");


    // add game points 
    JsonArray points = new JsonArray();
    // Experience Points 
    {
      JsonObject point = new JsonObject();
      point.addProperty("id", "sss");
      point.addProperty("name", "sss");
      point.addProperty("score", 0);
      points.add(point);
    }
    {
      JsonObject point = new JsonObject();
      point.addProperty("id", "gdasds");
      point.addProperty("name", "ertre");
      point.addProperty("score", 0);
      points.add(point);
    }
    // Skill Points 
    {
      JsonObject point = new JsonObject();
      point.addProperty("id", "skp1");
      point.addProperty("name", "test");
      point.addProperty("score", 0);
      points.add(point);
    }

    // add Skill and Experience Points 
    obj.add("pointConcept", points);
    System.out.println("2. POINTS  ADDED");


    // add game actions 
    JsonArray actions = new JsonArray();
    // data driven actions 
    actions.add("wewe");
    // event driven actions 
    actions.add("qewqe");
    actions.add("qwewqe");
    actions.add("werwrewr");

    obj.add("actions", actions);
    System.out.println("3. ACTIONS ADDED");


    //  add badge Collections 
    JsonArray badgeCollections = new JsonArray();

    {
      JsonObject badgeCollection = new JsonObject();
      badgeCollection.addProperty("id", "werew");
      badgeCollection.addProperty("name", "dfsdfds");
      JsonArray badgesEarned = new JsonArray();
      badgesEarned.add("werewqeew");
      badgeCollection.add("badgeEarned", badgesEarned);
      badgesEarned.add("wereqwew");
      badgeCollection.add("badgeEarned", badgesEarned);

      badgesEarned.add("badgeName");
      badgeCollection.add("badgeEarned", badgesEarned);
      badgeCollections.add(badgeCollection);
    }


    obj.add("badgeCollectionConcept", badgeCollections);

    System.out.println("4. BADGE COLLECTIONS ADDED");

    //  single Player Challenges 
    {
      JsonObject challenge = new JsonObject();
      challenge.addProperty("gameId", gameID);
      challenge.addProperty("id", "qwewq");
      challenge.addProperty("name", "eqwewqe");
      JsonArray variables = new JsonArray();
      variables.add("qweqwe");
      challenge.add("variables", variables);
      String challengeJson = challenge.toString();
      RequestBody body = RequestBody.create(JSON, challengeJson);
      doPostChallenge(body, gameID);

    }

    System.out.println("5. CHALLENGES ADDED");

    //  skill Level 
    JsonArray skillLevels = new JsonArray();



    //  experience Level 
    JsonArray experienceLevels = new JsonArray();


    JsonArray result = new JsonArray();
    result.addAll(skillLevels);
    result.addAll(experienceLevels);
    obj.add("levels", result);
    System.out.println("6. SKILL and EXPERIENCE LEVELS ADDED");


    String jsonString = obj.toString();
    RequestBody body = RequestBody.create(JSON, jsonString);

    // execute POST call to save the gamification Instance 
    doPostNewGame(body);

  }

  public void doPostChallenge(RequestBody body, String gameID) throws IOException {
    OkHttpClient client = new OkHttpClient();
    String urlFinal = apiChallengeUrl + gameID + "/challenge";
    Request request = new Request.Builder().header("Authorization", credentials).url(urlFinal).post(body).build();
    Response response = client.newCall(request).execute();
    System.out.println("Challenges created: " + response.body().string());

  }

  public void createInstitute(RequestBody body, String ownerID) throws IOException {
    OkHttpClient client = new OkHttpClient();
    String urlFinal = apiIstituteUrl + ownerID;
    Request request = new Request.Builder().header("Authorization", Token).url(urlFinal).post(body).build();
    System.out.println("----KGG ELEMENTS CREATED------");

  }
  public void createSchool(RequestBody body, String ownerID, String instituteID) throws IOException {
    OkHttpClient client = new OkHttpClient();
    String id = instituteID.replace("\"", "");
    String urlFinal = apiSchoolUrl + ownerID + '/' + id;

  }

  public void doPostNewGame(RequestBody body) throws IOException {
    OkHttpClient client = new OkHttpClient();
    String urlFinal = apiGameUrl + "/model/game/";
    Request request = new Request.Builder().header("Authorization", credentials).url(urlFinal).post(body).build();
    Response response = client.newCall(request).execute();
    System.out.println("Game Creation Result: " + response.body().string());
    System.out.println("6. GAME INSTANCE CREATED");
  }

  public String getInstituteID(String instituteName) throws IOException {
    OkHttpClient client = new OkHttpClient();
    String finalUrl = apiIstituteUrl + "/TEST";
    Request request = new Request.Builder().header("Authorization", Token).url(finalUrl).build();
    Response response = client.newCall(request).execute();
    String result = response.body().string().toString();
    String result1 = result.replace("{", "");
    String result2 = result1.replace("}", "");
    String result3 = result2.replace("[", "");
    String result4 = result3.replace("]", "");

    String[] firstArray = result4.split(",");
    String[] secondArray = firstArray[1].split(":");

    String returnID = secondArray[1];
    return returnID;
  }

  public static void main(String[] arguments) throws IOException {

    System.out.println("1. GAME INSTANTIATION STARTED");
    new GameInstance_8();


  }
}
