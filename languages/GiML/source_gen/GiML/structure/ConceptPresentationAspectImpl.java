package GiML.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_ClassroomInstance;
  private ConceptPresentation props_DomainInstance;
  private ConceptPresentation props_GameInstance;
  private ConceptPresentation props_InstituteInstance;
  private ConceptPresentation props_SchoolInstance;
  private ConceptPresentation props_StudentInstance;
  private ConceptPresentation props_istanzaDashboard;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.ClassroomInstance:
        if (props_ClassroomInstance == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_ClassroomInstance = cpb.create();
        }
        return props_ClassroomInstance;
      case LanguageConceptSwitch.DomainInstance:
        if (props_DomainInstance == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_DomainInstance = cpb.create();
        }
        return props_DomainInstance;
      case LanguageConceptSwitch.GameInstance:
        if (props_GameInstance == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_GameInstance = cpb.create();
        }
        return props_GameInstance;
      case LanguageConceptSwitch.InstituteInstance:
        if (props_InstituteInstance == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_InstituteInstance = cpb.create();
        }
        return props_InstituteInstance;
      case LanguageConceptSwitch.SchoolInstance:
        if (props_SchoolInstance == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_SchoolInstance = cpb.create();
        }
        return props_SchoolInstance;
      case LanguageConceptSwitch.StudentInstance:
        if (props_StudentInstance == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_StudentInstance = cpb.create();
        }
        return props_StudentInstance;
      case LanguageConceptSwitch.istanzaDashboard:
        if (props_istanzaDashboard == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_istanzaDashboard = cpb.create();
        }
        return props_istanzaDashboard;
    }
    return null;
  }
}
