package GiML.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_BadgeCollectionInstance;
  private ConceptPresentation props_BadgeInstance;
  private ConceptPresentation props_ChallengeVariable;
  private ConceptPresentation props_ClassroomInstance;
  private ConceptPresentation props_DomainInstance;
  private ConceptPresentation props_ExperienceLevelInstance;
  private ConceptPresentation props_GameInstance;
  private ConceptPresentation props_InstituteInstance;
  private ConceptPresentation props_LevelTresholds;
  private ConceptPresentation props_SchoolInstance;
  private ConceptPresentation props_SinglePlayerChallengeInstance;
  private ConceptPresentation props_StudentInstance;
  private ConceptPresentation props_dataDrivenActionInstance;
  private ConceptPresentation props_eventDrivenActionInstance;
  private ConceptPresentation props_experiencePointInstance;
  private ConceptPresentation props_istanzaDashboard;
  private ConceptPresentation props_skillPointInstance;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.BadgeCollectionInstance:
        if (props_BadgeCollectionInstance == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_BadgeCollectionInstance = cpb.create();
        }
        return props_BadgeCollectionInstance;
      case LanguageConceptSwitch.BadgeInstance:
        if (props_BadgeInstance == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_BadgeInstance = cpb.create();
        }
        return props_BadgeInstance;
      case LanguageConceptSwitch.ChallengeVariable:
        if (props_ChallengeVariable == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_ChallengeVariable = cpb.create();
        }
        return props_ChallengeVariable;
      case LanguageConceptSwitch.ClassroomInstance:
        if (props_ClassroomInstance == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_ClassroomInstance = cpb.create();
        }
        return props_ClassroomInstance;
      case LanguageConceptSwitch.DomainInstance:
        if (props_DomainInstance == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_DomainInstance = cpb.create();
        }
        return props_DomainInstance;
      case LanguageConceptSwitch.ExperienceLevelInstance:
        if (props_ExperienceLevelInstance == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_ExperienceLevelInstance = cpb.create();
        }
        return props_ExperienceLevelInstance;
      case LanguageConceptSwitch.GameInstance:
        if (props_GameInstance == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_GameInstance = cpb.create();
        }
        return props_GameInstance;
      case LanguageConceptSwitch.InstituteInstance:
        if (props_InstituteInstance == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_InstituteInstance = cpb.create();
        }
        return props_InstituteInstance;
      case LanguageConceptSwitch.LevelTresholds:
        if (props_LevelTresholds == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_LevelTresholds = cpb.create();
        }
        return props_LevelTresholds;
      case LanguageConceptSwitch.SchoolInstance:
        if (props_SchoolInstance == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_SchoolInstance = cpb.create();
        }
        return props_SchoolInstance;
      case LanguageConceptSwitch.SinglePlayerChallengeInstance:
        if (props_SinglePlayerChallengeInstance == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_SinglePlayerChallengeInstance = cpb.create();
        }
        return props_SinglePlayerChallengeInstance;
      case LanguageConceptSwitch.StudentInstance:
        if (props_StudentInstance == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_StudentInstance = cpb.create();
        }
        return props_StudentInstance;
      case LanguageConceptSwitch.dataDrivenActionInstance:
        if (props_dataDrivenActionInstance == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_dataDrivenActionInstance = cpb.create();
        }
        return props_dataDrivenActionInstance;
      case LanguageConceptSwitch.eventDrivenActionInstance:
        if (props_eventDrivenActionInstance == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_eventDrivenActionInstance = cpb.create();
        }
        return props_eventDrivenActionInstance;
      case LanguageConceptSwitch.experiencePointInstance:
        if (props_experiencePointInstance == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_experiencePointInstance = cpb.create();
        }
        return props_experiencePointInstance;
      case LanguageConceptSwitch.istanzaDashboard:
        if (props_istanzaDashboard == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_istanzaDashboard = cpb.create();
        }
        return props_istanzaDashboard;
      case LanguageConceptSwitch.skillPointInstance:
        if (props_skillPointInstance == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_skillPointInstance = cpb.create();
        }
        return props_skillPointInstance;
    }
    return null;
  }
}
