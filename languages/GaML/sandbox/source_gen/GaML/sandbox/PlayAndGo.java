package GaML.sandbox;

/*Generated by MPS */

import it.smartcommunitylab.ApiClient;
import it.smartcommunitylab.basic.api.PlayerControllerApi;
import it.smartcommunitylab.basic.api.GameControllerApi;
import it.smartcommunitylab.model.GameDTO;
import java.util.List;
import java.util.ArrayList;
import it.smartcommunitylab.model.ext.PointConcept;
import java.util.Date;
import it.smartcommunitylab.model.BadgeCollectionConcept;
import it.smartcommunitylab.ApiException;

public class PlayAndGo {
  private static final String GAMIFICATION_URL = "http://localhost:18000/gamification";
  private static final String USER = "antbucc";
  private static final String PWD = "antbucc";

  public static void run() {
    ApiClient client = new ApiClient(GAMIFICATION_URL);
    client.setUsername(USER);
    client.setPassword(PWD);

    PlayerControllerApi playerApi = new PlayerControllerApi(client);
    GameControllerApi gameApi = new GameControllerApi(client);
    try {
      GameDTO game = new GameDTO();

      // add Game Info 
      game.setName("PlayAndGo");
      game.setId("playAndGoID");
      game.setOwner("FBK");

      List<String> actions = new ArrayList<String>();


      //  Add Game DataDriven Actions 
      actions.add("Sava_Itinerary");


      //  Add Game EventDriven Actions 
      actions.add("Survey_Complete");
      actions.add("CheckIn_newUser");

      //  Add Game Skill Points 

      List<PointConcept> points = new ArrayList<PointConcept>();
      long DAY = 60 * 60 * 24 * 1000;
      long WEEK = DAY * 7;
      Date start = new Date();

      {
        PointConcept p = new PointConcept("green_leaves");
        String periodType = "weekly";
        if (periodType == "weekly") {
          p.addPeriod(periodType, start, WEEK);

        } else if (periodType == "daily") {
          p.addPeriod(periodType, start, DAY);
        }
        points.add(p);
      }

      //  Add Game Experience Points 
      {
        PointConcept p = new PointConcept("Walk_Km");
        String periodType = "daily";
        if (periodType == "weekly") {
          p.addPeriod(periodType, start, WEEK);

        } else if (periodType == "daily") {
          p.addPeriod(periodType, start, DAY);
        }
        points.add(p);
      }
      {
        PointConcept p = new PointConcept("Bike_Km");
        String periodType = "daily";
        if (periodType == "weekly") {
          p.addPeriod(periodType, start, WEEK);

        } else if (periodType == "daily") {
          p.addPeriod(periodType, start, DAY);
        }
        points.add(p);
      }
      {
        PointConcept p = new PointConcept("BikeSharing_Km");
        String periodType = "daily";
        if (periodType == "weekly") {
          p.addPeriod(periodType, start, WEEK);

        } else if (periodType == "daily") {
          p.addPeriod(periodType, start, DAY);
        }
        points.add(p);
      }
      {
        PointConcept p = new PointConcept("Bus_Km");
        String periodType = "daily";
        if (periodType == "weekly") {
          p.addPeriod(periodType, start, WEEK);

        } else if (periodType == "daily") {
          p.addPeriod(periodType, start, DAY);
        }
        points.add(p);
      }
      {
        PointConcept p = new PointConcept("Train_Km");
        String periodType = "daily";
        if (periodType == "weekly") {
          p.addPeriod(periodType, start, WEEK);

        } else if (periodType == "daily") {
          p.addPeriod(periodType, start, DAY);
        }
        points.add(p);
      }
      {
        PointConcept p = new PointConcept("Car_Km");
        String periodType = "daily";
        if (periodType == "weekly") {
          p.addPeriod(periodType, start, WEEK);

        } else if (periodType == "daily") {
          p.addPeriod(periodType, start, DAY);
        }
        points.add(p);
      }
      {
        PointConcept p = new PointConcept("Bike_trips");
        String periodType = "weekly";
        if (periodType == "weekly") {
          p.addPeriod(periodType, start, WEEK);

        } else if (periodType == "daily") {
          p.addPeriod(periodType, start, DAY);
        }
        points.add(p);
      }
      {
        PointConcept p = new PointConcept("BikeSharing_Trips");
        String periodType = "weekly";
        if (periodType == "weekly") {
          p.addPeriod(periodType, start, WEEK);

        } else if (periodType == "daily") {
          p.addPeriod(periodType, start, DAY);
        }
        points.add(p);
      }
      {
        PointConcept p = new PointConcept("NoCar_Trips");
        String periodType = "weekly";
        if (periodType == "weekly") {
          p.addPeriod(periodType, start, WEEK);

        } else if (periodType == "daily") {
          p.addPeriod(periodType, start, DAY);
        }
        points.add(p);
      }

      game.setPointConcept(points);

      //  add badge collections 
      List<BadgeCollectionConcept> badgeCollections = new ArrayList<BadgeCollectionConcept>();
      //  Add Game Experience Points 
      {
        BadgeCollectionConcept bc = new BadgeCollectionConcept();
        bc.setName("BikeSharing_Pioneer");
        List<String> badgesEarned = new ArrayList<String>();
        badgesEarned.add("1_bike_trip");
        badgesEarned.add("5_bike_trip");
        badgesEarned.add("10_bike_trip");
        bc.setBadgeEarned(badgesEarned);
        badgeCollections.add(bc);
      }
      {
        BadgeCollectionConcept bc = new BadgeCollectionConcept();
        bc.setName("GreenLeaves");
        List<String> badgesEarned = new ArrayList<String>();
        badgesEarned.add("50_point_green");
        badgesEarned.add("100_point_green");
        badgesEarned.add("150_point_green");
        bc.setBadgeEarned(badgesEarned);
        badgeCollections.add(bc);
      }


      // add all the elements at the Game Definition 
      game.setActions(actions);
      game.setPointConcept(points);
      game.setBadgeCollectionConcept(badgeCollections);

      // POST request to the Gamification Engine to memorize the Game Definition 
      gameApi.saveGameUsingPOST2(game);

    } catch (ApiException e) {
      e.printStackTrace();
    }

  }
}
