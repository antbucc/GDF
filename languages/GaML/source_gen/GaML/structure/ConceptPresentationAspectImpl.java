package GaML.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_Classes;
  private ConceptPresentation props_Count;
  private ConceptPresentation props_Distance;
  private ConceptPresentation props_Game;
  private ConceptPresentation props_Trips;
  private ConceptPresentation props_tripAction;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.Classes:
        if (props_Classes == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Classes = cpb.create();
        }
        return props_Classes;
      case LanguageConceptSwitch.Count:
        if (props_Count == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Count = cpb.create();
        }
        return props_Count;
      case LanguageConceptSwitch.Distance:
        if (props_Distance == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Distance = cpb.create();
        }
        return props_Distance;
      case LanguageConceptSwitch.Game:
        if (props_Game == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Game = cpb.create();
        }
        return props_Game;
      case LanguageConceptSwitch.Trips:
        if (props_Trips == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Trips = cpb.create();
        }
        return props_Trips;
      case LanguageConceptSwitch.tripAction:
        if (props_tripAction == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_tripAction = cpb.create();
        }
        return props_tripAction;
    }
    return null;
  }
}
