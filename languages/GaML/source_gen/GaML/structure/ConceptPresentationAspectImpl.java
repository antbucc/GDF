package GaML.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_Classroom;
  private ConceptPresentation props_ComplexTeam;
  private ConceptPresentation props_Dashboard;
  private ConceptPresentation props_DefinizioneGioco;
  private ConceptPresentation props_Dominio;
  private ConceptPresentation props_Institute;
  private ConceptPresentation props_School;
  private ConceptPresentation props_Student;
  private ConceptPresentation props_Volontario;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.Classroom:
        if (props_Classroom == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Classroom = cpb.create();
        }
        return props_Classroom;
      case LanguageConceptSwitch.ComplexTeam:
        if (props_ComplexTeam == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_ComplexTeam = cpb.create();
        }
        return props_ComplexTeam;
      case LanguageConceptSwitch.Dashboard:
        if (props_Dashboard == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Dashboard = cpb.create();
        }
        return props_Dashboard;
      case LanguageConceptSwitch.DefinizioneGioco:
        if (props_DefinizioneGioco == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_DefinizioneGioco = cpb.create();
        }
        return props_DefinizioneGioco;
      case LanguageConceptSwitch.Dominio:
        if (props_Dominio == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Dominio = cpb.create();
        }
        return props_Dominio;
      case LanguageConceptSwitch.Institute:
        if (props_Institute == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Institute = cpb.create();
        }
        return props_Institute;
      case LanguageConceptSwitch.School:
        if (props_School == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_School = cpb.create();
        }
        return props_School;
      case LanguageConceptSwitch.Student:
        if (props_Student == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Student = cpb.create();
        }
        return props_Student;
      case LanguageConceptSwitch.Volontario:
        if (props_Volontario == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Volontario = cpb.create();
        }
        return props_Volontario;
    }
    return null;
  }
}
