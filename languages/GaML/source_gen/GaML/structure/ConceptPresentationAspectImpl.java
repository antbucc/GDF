package GaML.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_Classroom;
  private ConceptPresentation props_ComplexTeam;
  private ConceptPresentation props_Dashboard;
  private ConceptPresentation props_Domain;
  private ConceptPresentation props_ExperienceLevel;
  private ConceptPresentation props_GameDefinition;
  private ConceptPresentation props_Institute;
  private ConceptPresentation props_KGGBadge;
  private ConceptPresentation props_KGGBadgeCollection;
  private ConceptPresentation props_School;
  private ConceptPresentation props_SinglePlayerChallenge;
  private ConceptPresentation props_Student;
  private ConceptPresentation props_Volontario;
  private ConceptPresentation props_dataDrivenAction;
  private ConceptPresentation props_eventDrivenAction;
  private ConceptPresentation props_experiencePoint;
  private ConceptPresentation props_skillPoint;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.Classroom:
        if (props_Classroom == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Classroom = cpb.create();
        }
        return props_Classroom;
      case LanguageConceptSwitch.ComplexTeam:
        if (props_ComplexTeam == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_ComplexTeam = cpb.create();
        }
        return props_ComplexTeam;
      case LanguageConceptSwitch.Dashboard:
        if (props_Dashboard == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Dashboard = cpb.create();
        }
        return props_Dashboard;
      case LanguageConceptSwitch.Domain:
        if (props_Domain == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Domain = cpb.create();
        }
        return props_Domain;
      case LanguageConceptSwitch.ExperienceLevel:
        if (props_ExperienceLevel == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_ExperienceLevel = cpb.create();
        }
        return props_ExperienceLevel;
      case LanguageConceptSwitch.GameDefinition:
        if (props_GameDefinition == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_GameDefinition = cpb.create();
        }
        return props_GameDefinition;
      case LanguageConceptSwitch.Institute:
        if (props_Institute == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Institute = cpb.create();
        }
        return props_Institute;
      case LanguageConceptSwitch.KGGBadge:
        if (props_KGGBadge == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_KGGBadge = cpb.create();
        }
        return props_KGGBadge;
      case LanguageConceptSwitch.KGGBadgeCollection:
        if (props_KGGBadgeCollection == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_KGGBadgeCollection = cpb.create();
        }
        return props_KGGBadgeCollection;
      case LanguageConceptSwitch.School:
        if (props_School == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_School = cpb.create();
        }
        return props_School;
      case LanguageConceptSwitch.SinglePlayerChallenge:
        if (props_SinglePlayerChallenge == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_SinglePlayerChallenge = cpb.create();
        }
        return props_SinglePlayerChallenge;
      case LanguageConceptSwitch.Student:
        if (props_Student == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Student = cpb.create();
        }
        return props_Student;
      case LanguageConceptSwitch.Volontario:
        if (props_Volontario == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Volontario = cpb.create();
        }
        return props_Volontario;
      case LanguageConceptSwitch.dataDrivenAction:
        if (props_dataDrivenAction == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_dataDrivenAction = cpb.create();
        }
        return props_dataDrivenAction;
      case LanguageConceptSwitch.eventDrivenAction:
        if (props_eventDrivenAction == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_eventDrivenAction = cpb.create();
        }
        return props_eventDrivenAction;
      case LanguageConceptSwitch.experiencePoint:
        if (props_experiencePoint == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_experiencePoint = cpb.create();
        }
        return props_experiencePoint;
      case LanguageConceptSwitch.skillPoint:
        if (props_skillPoint == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_skillPoint = cpb.create();
        }
        return props_skillPoint;
    }
    return null;
  }
}
