package GaML.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_Alunno;
  private ConceptPresentation props_Classe;
  private ConceptPresentation props_ComplexTeam;
  private ConceptPresentation props_DefinizioneGioco;
  private ConceptPresentation props_Dominio;
  private ConceptPresentation props_Istituto;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.Alunno:
        if (props_Alunno == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Alunno = cpb.create();
        }
        return props_Alunno;
      case LanguageConceptSwitch.Classe:
        if (props_Classe == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Classe = cpb.create();
        }
        return props_Classe;
      case LanguageConceptSwitch.ComplexTeam:
        if (props_ComplexTeam == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_ComplexTeam = cpb.create();
        }
        return props_ComplexTeam;
      case LanguageConceptSwitch.DefinizioneGioco:
        if (props_DefinizioneGioco == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_DefinizioneGioco = cpb.create();
        }
        return props_DefinizioneGioco;
      case LanguageConceptSwitch.Dominio:
        if (props_Dominio == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Dominio = cpb.create();
        }
        return props_Dominio;
      case LanguageConceptSwitch.Istituto:
        if (props_Istituto == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Istituto = cpb.create();
        }
        return props_Istituto;
    }
    return null;
  }
}
