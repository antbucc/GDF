package GadML.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import jetbrains.mps.smodel.runtime.DataTypeDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder2;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  /*package*/ final ConceptDescriptor myConceptGameAdaptation = createDescriptorForGameAdaptation();
  /*package*/ final ConceptDescriptor myConceptnewChallenge = createDescriptorFornewChallenge();
  private final LanguageConceptSwitch myIndexSwitch;

  public StructureAspectDescriptor() {
    myIndexSwitch = new LanguageConceptSwitch();
  }


  @Override
  public void reportDependencies(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.Dependencies deps) {
    deps.extendedLanguage(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, "jetbrains.mps.lang.core");
    deps.aggregatedLanguage(0x119e117f12604f12L, 0xb46eefd3d0e4c44fL, "GiML");
  }

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptGameAdaptation, myConceptnewChallenge);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(SConceptId id) {
    switch (myIndexSwitch.index(id)) {
      case LanguageConceptSwitch.GameAdaptation:
        return myConceptGameAdaptation;
      case LanguageConceptSwitch.newChallenge:
        return myConceptnewChallenge;
      default:
        return null;
    }
  }

  @Override
  public Collection<DataTypeDescriptor> getDataTypeDescriptors() {
    return Arrays.asList();
  }

  /*package*/ int internalIndex(SAbstractConcept c) {
    return myIndexSwitch.index(c);
  }

  private static ConceptDescriptor createDescriptorForGameAdaptation() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("GadML", "GameAdaptation", 0x572858ef200044deL, 0x91d5b23c6fdd03a3L, 0x13722978f4c3b45bL);
    b.class_(false, false, false);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.origin("r:81a15a54-0e5b-47b0-85ef-23fcbab23d25(GadML.structure)/1401228033544926299");
    b.version(2);
    b.associate("gameInstance", 0x13722978f4c42509L).target(0x119e117f12604f12L, 0xb46eefd3d0e4c44fL, 0x19b939282ee57042L).optional(false).origin("1401228033544955145").done();
    b.alias("gameAdaptation");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorFornewChallenge() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("GadML", "newChallenge", 0x572858ef200044deL, 0x91d5b23c6fdd03a3L, 0x13722978f4c3b4eeL);
    b.class_(false, false, true);
    b.super_("GadML.structure.GameAdaptation", 0x572858ef200044deL, 0x91d5b23c6fdd03a3L, 0x13722978f4c3b45bL);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.parent(0x4caf0310491e41f5L, 0x8a9b2006b3a94898L, 0x40c1a7cb987d20d5L);
    b.origin("r:81a15a54-0e5b-47b0-85ef-23fcbab23d25(GadML.structure)/1401228033544926446");
    b.version(2);
    b.aggregate("challengeInstance", 0x13722978f4c3b57fL).target(0x119e117f12604f12L, 0xb46eefd3d0e4c44fL, 0x687da6244782caa1L).optional(false).ordered(true).multiple(false).origin("1401228033544926591").done();
    b.alias("newChallenge");
    return b.create();
  }
}
