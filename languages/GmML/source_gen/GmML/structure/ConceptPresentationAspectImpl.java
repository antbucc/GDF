package GmML.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_BadgeCollectionConceptState;
  private ConceptPresentation props_BadgeState;
  private ConceptPresentation props_ChallengeConceptState;
  private ConceptPresentation props_ChallengeFieldState;
  private ConceptPresentation props_DailyInstanceState;
  private ConceptPresentation props_DailyPeriodState;
  private ConceptPresentation props_Monitor;
  private ConceptPresentation props_PlayerState;
  private ConceptPresentation props_PointConceptState;
  private ConceptPresentation props_PointPeriodState;
  private ConceptPresentation props_State;
  private ConceptPresentation props_WeeklyInstanceState;
  private ConceptPresentation props_WeeklyPeriodState;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.BadgeCollectionConceptState:
        if (props_BadgeCollectionConceptState == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_BadgeCollectionConceptState = cpb.create();
        }
        return props_BadgeCollectionConceptState;
      case LanguageConceptSwitch.BadgeState:
        if (props_BadgeState == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_BadgeState = cpb.create();
        }
        return props_BadgeState;
      case LanguageConceptSwitch.ChallengeConceptState:
        if (props_ChallengeConceptState == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_ChallengeConceptState = cpb.create();
        }
        return props_ChallengeConceptState;
      case LanguageConceptSwitch.ChallengeFieldState:
        if (props_ChallengeFieldState == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("challengeFieldState");
          props_ChallengeFieldState = cpb.create();
        }
        return props_ChallengeFieldState;
      case LanguageConceptSwitch.DailyInstanceState:
        if (props_DailyInstanceState == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_DailyInstanceState = cpb.create();
        }
        return props_DailyInstanceState;
      case LanguageConceptSwitch.DailyPeriodState:
        if (props_DailyPeriodState == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("DailyPeriodState");
          props_DailyPeriodState = cpb.create();
        }
        return props_DailyPeriodState;
      case LanguageConceptSwitch.Monitor:
        if (props_Monitor == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("monitor");
          props_Monitor = cpb.create();
        }
        return props_Monitor;
      case LanguageConceptSwitch.PlayerState:
        if (props_PlayerState == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_PlayerState = cpb.create();
        }
        return props_PlayerState;
      case LanguageConceptSwitch.PointConceptState:
        if (props_PointConceptState == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("pointConceptState");
          props_PointConceptState = cpb.create();
        }
        return props_PointConceptState;
      case LanguageConceptSwitch.PointPeriodState:
        if (props_PointPeriodState == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("PointPeriodState");
          props_PointPeriodState = cpb.create();
        }
        return props_PointPeriodState;
      case LanguageConceptSwitch.State:
        if (props_State == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("state");
          props_State = cpb.create();
        }
        return props_State;
      case LanguageConceptSwitch.WeeklyInstanceState:
        if (props_WeeklyInstanceState == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("WeeklyInstanceState");
          props_WeeklyInstanceState = cpb.create();
        }
        return props_WeeklyInstanceState;
      case LanguageConceptSwitch.WeeklyPeriodState:
        if (props_WeeklyPeriodState == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("WeeklyPeriodState");
          props_WeeklyPeriodState = cpb.create();
        }
        return props_WeeklyPeriodState;
    }
    return null;
  }
}
