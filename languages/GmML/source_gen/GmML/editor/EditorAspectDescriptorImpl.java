package GmML.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.EditorAspectDescriptorBase;
import org.jetbrains.annotations.NotNull;
import java.util.Collection;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Collections;
import jetbrains.mps.lang.smodel.ConceptSwitchIndex;
import jetbrains.mps.lang.smodel.ConceptSwitchIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;

public class EditorAspectDescriptorImpl extends EditorAspectDescriptorBase {
  @NotNull
  public Collection<ConceptEditor> getDeclaredEditors(SAbstractConcept concept) {
    SAbstractConcept cncpt = ((SAbstractConcept) concept);
    switch (conceptIndex.index(cncpt)) {
      case 0:
        return Collections.<ConceptEditor>singletonList(new BadgeCollectionConceptState_Editor());
      case 1:
        return Collections.<ConceptEditor>singletonList(new BadgeState_Editor());
      case 2:
        return Collections.<ConceptEditor>singletonList(new ChallengeConceptState_Editor());
      case 3:
        return Collections.<ConceptEditor>singletonList(new ChallengeFieldState_Editor());
      case 4:
        return Collections.<ConceptEditor>singletonList(new Monitor_Editor());
      case 5:
        return Collections.<ConceptEditor>singletonList(new PlayerState_Editor());
      case 6:
        return Collections.<ConceptEditor>singletonList(new PointConceptState_Editor());
      case 7:
        return Collections.<ConceptEditor>singletonList(new State_Editor());
      default:
    }
    return Collections.<ConceptEditor>emptyList();
  }



  private static final ConceptSwitchIndex conceptIndex = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0xae7671b208ec4cb3L, 0xbda2147e5e095aeaL, 0x16a9394b340dbf8eL), MetaIdFactory.conceptId(0xae7671b208ec4cb3L, 0xbda2147e5e095aeaL, 0x16a9394b340e6ea6L), MetaIdFactory.conceptId(0xae7671b208ec4cb3L, 0xbda2147e5e095aeaL, 0x7b087e04605a4d93L), MetaIdFactory.conceptId(0xae7671b208ec4cb3L, 0xbda2147e5e095aeaL, 0x7b087e04608b2cf7L), MetaIdFactory.conceptId(0xae7671b208ec4cb3L, 0xbda2147e5e095aeaL, 0x3488dc45bc5907f5L), MetaIdFactory.conceptId(0xae7671b208ec4cb3L, 0xbda2147e5e095aeaL, 0x16a9394b31c1a45bL), MetaIdFactory.conceptId(0xae7671b208ec4cb3L, 0xbda2147e5e095aeaL, 0x16a9394b335a4da5L), MetaIdFactory.conceptId(0xae7671b208ec4cb3L, 0xbda2147e5e095aeaL, 0x16a9394b335a44d7L)).seal();
}
